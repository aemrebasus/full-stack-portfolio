{"version":3,"sources":["webpack:///src/pma-app/consts.ts","webpack:///src/pma-app/services/common/router.control.ts","webpack:///src/pma-app/shared/tform/reactive-form/reactive-form.component.ts","webpack:///src/pma-app/shared/tform/reactive-form/reactive-form.component.html","webpack:///src/pma-app/shared/tform/tform.module.ts","webpack:///src/pma-app/shared/tform/wait/wait-for.pipe.ts"],"names":["BASE_URL","RouterControl","router","route","navigate","providedIn","ReactiveFormComponent","routerControl","confirmationMetas","all","data","subscribe","result","config","resolved","form","inputs","forEach","input","control","validators","addControl","name","disableIdField","Object","keys","e","getControl","setValue","toLowerCase","disable","meta","submitLabel","split","valid","dirty","bgColor","title","controlName","controls","value","err","Error","controlname","c","touched","invalid","errors","event","status","type","onBack","onReset","onSubmit","onDelete","events","submit","paylaod","console","log","backHome","entries","reset","navigateHome","confirm","selector","templateUrl","styleUrls","TformModule","forChild","path","component","declarations","imports","WaitForPipe","wait","Promise","res","rej","setTimeout"],"mappings":"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","file":"shared-tform-tform-module-es5.js","sourcesContent":["export const BASE_URL = '/pma';\r\n\r\n","import { Injectable } from '@angular/core';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { BASE_URL } from '@pma/consts';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class RouterControl {\r\n\r\n    constructor(private router: Router, private route: ActivatedRoute) { }\r\n\r\n    navigateHome() {\r\n        this.router.navigate([BASE_URL]);\r\n    }\r\n}\r\n\r\n","import { FormControl, FormGroup, ValidationErrors } from '@angular/forms';\nimport { IFormController } from './reactive-form.interfaces';\nimport { Component, Input, OnInit, } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { IConfirmMeta, ConfirmationMetas, IConfirmationResult } from '@shared/tconfirmation/confirm/confirm.interfaces';\nimport { RouterControl } from '@pma-services/common/router.control';\n\n@Component({\n  selector: 'app-reactive-form',\n  templateUrl: './reactive-form.component.html',\n  styleUrls: ['./reactive-form.component.scss']\n})\nexport class ReactiveFormComponent implements IFormController, OnInit {\n\n  /**\n   * Contains confirmation messages\n   */\n  confirmationMetas: IConfirmMeta[] = ConfirmationMetas.all();\n\n  /**\n   * Forms' title, controls, controls'validators etc.\n   */\n  @Input() config: any;\n\n\n  /**\n   * Form that comminicates with the template.\n   */\n  @Input() form: FormGroup;\n\n\n  constructor(private routerControl: RouterControl, private route: ActivatedRoute) { }\n\n\n  ngOnInit(): void {\n\n    this.route.data.subscribe(result => {\n      this.config = result.resolved;\n    });\n\n\n    this.form = new FormGroup({});\n\n\n    this.config.inputs.forEach(input => {\n\n      const control = new FormControl('', input.validators);\n\n      this.form.addControl(input.name, control);\n\n      this.disableIdField(input.name);\n    });\n\n\n    for (let e of Object.keys(this.config.data)) {\n      if (e !== 'meta') {\n        this.getControl(e).setValue(this.config.data[e]);\n      }\n    }\n\n\n  }\n\n  disableIdField(name: string) {\n    if (name.toLowerCase() === 'id') {\n      this.getControl(name).disable();\n    }\n  }\n\n  /**\n   * template helpers\n   */\n  submitLabel() {\n    return this.config.meta.submitLabel;\n  }\n\n  // Helper for comfirmatoin | converts the submit label to the selector for Confirmation modal so that when use clicks the submit button \n  // corresboding Modal shows up.\n  submitType() {\n    return `#${this.submitLabel().split(' ')[0].toLowerCase()}`;\n  }\n\n  isFormValid() {\n    return this.form.valid && this.form.dirty;\n  }\n  isDirty() {\n    return this.form.dirty;\n  }\n\n  bgColor() {\n    return this.config.meta.bgColor;\n  }\n  title() {\n    return this.config.meta.title || this.config.meta.name;\n  }\n\n  inputs() {\n    return this.config.inputs;\n  }\n\n\n  // Form controller Access\n  getControl(controlName: string): FormControl {\n    return this.form.controls[controlName] as FormControl;\n  }\n\n  value(controlName: string) {\n    return this.getControl(controlName).value;\n  }\n\n  setControlValue(controlName: string, value: string | number) {\n    try {\n      this.getControl(controlName).setValue(value);\n    } catch (err) {\n      throw new Error(`Could not find the field with the name ${controlName}`);\n    }\n  }\n\n\n  getControlValue(controlname: string) {\n    return this.getControl(controlname).value;\n  }\n\n  valid(name: string): boolean {\n\n    const c = this.getControl(name);\n    return c.valid && (c.touched && c.dirty);\n  }\n\n  invalid(name: string): boolean {\n    const c = this.getControl(name);\n    return c.invalid && (c.touched && c.dirty);\n  }\n\n\n  /**\n   * return the validation result of the control\n   * @param controlName contol name\n   */\n  errors(controlName: string): ValidationErrors {\n    return this.getControl(controlName).errors;\n  }\n  // Form Controller Acess\n\n\n\n\n\n\n\n  // confirmation\n  confirm(event: IConfirmationResult) {\n    if (event.status) {\n\n      switch (event.type) {\n        case 'back': this.onBack(event); break;\n        case 'reset': this.onReset(event); break;\n        case 'cancel': this.onBack(event); break;\n        case 'close': this.onBack(event); break;\n        case 'save': this.onSubmit(event); break;\n        case 'delete': this.onDelete(event); break;\n        case 'update': this.onSubmit(event); break;\n      }\n\n\n    }\n\n  }\n\n  // Event handlers\n  onSubmit(event: IConfirmationResult) {\n    try {\n\n      this.config.events.submit({\n        type: 'submit',\n        paylaod: this.form.value\n      });\n      console.log(this.form.value);\n\n    } catch (err) {\n      // do nothing\n    } finally {\n\n      this.backHome();\n    }\n\n\n\n  }\n\n  onDelete(event: IConfirmationResult) {\n    try {\n      this.config.events.submit({\n        type: 'delete',\n        paylaod: this.form.value\n      });\n    } catch (err) {\n      // do nothing...\n    } finally {\n      this.backHome();\n    }\n  }\n\n\n\n  onBack(event: IConfirmationResult) {\n    try {\n      this.config.events.submit({\n        type: 'back',\n        paylaod: this.form.value\n      });\n    } catch (err) {\n      // do nothing...\n    } finally {\n      this.backHome();\n    }\n\n  }\n\n  onReset(event: IConfirmationResult) {\n\n    try {\n      this.config.events.submit({\n        type: 'reset',\n        paylaod: this.form.value\n      });\n    } catch (err) {\n\n      // do nothing.\n\n    } finally {\n      Object.entries(this.form.controls).forEach(e => {\n        this.form.controls[e[0]].reset('', { invalid: null, valid: null, dirty: null, touched: null });\n      });\n    }\n  }\n\n  backHome() {\n    this.routerControl.navigateHome();\n  }\n\n}\n\n","<app-modal-wrapper [bgColor]=\"bgColor()\" [title]=\"title()\" (confirmEvent)=\"confirm($event)\">\n    <div class=\"card-body bg-info\">\n        {{form.value | json}}\n    </div>\n\n    <form [formGroup]=\"form\">\n\n        <div class=\"form-group\" *ngFor=\"let input of inputs()\">\n\n\n            <label for={{input.name}}>{{input.label | titlecase}}</label>\n\n            <input [formControlName]=\"input.name\" type=\"text\" [id]=\"input.name\" class=\"form-control\"\n                [class.is-invalid]=\"invalid(input.name)\" [class.is-valid]=\"valid(input.name)\"\n                [placeholder]=\"input.placeholder | titlecase\" autocomplete=\"off\"/>\n\n            <small class=\"form-text text-muted\">{{input.helperText}}</small>\n\n            <!-- Validaton Errors  -->\n            <div *ngIf=\"invalid(input.name)\" class=\"alert alert-danger\">\n\n                <div *ngIf=\"errors(input.name).required\">\n                    {{input.name | titlecase}} is required.\n                </div>\n\n                <div *ngIf=\"errors(input.name).minLength\">\n                    {{input.name | titlecase}} does not meet the minimum-length requirement.\n                </div>\n\n                <div *ngIf=\"errors(input.name).forbiddenName\">\n                    {{value(input.name | titlecase)}} is not allowed .\n                </div>\n\n                <div *ngIf=\"errors(input.name).NaN\">\n                    {{value(input.name | titlecase)}} is not a number .\n                </div>\n\n                <div *ngIf=\"errors(input.name).email\">\n                    {{value(input.name)}} is not an email .\n                </div>\n\n\n                <!-- Add any validation error message here -->\n            </div>\n\n        </div>\n\n\n    </form>\n\n    <button class=\"btn btn-dark mr-2\" data-toggle=\"modal\" data-target=\"#back\">\n        <i class=\"fa fa-arrow-left\" aria-hidden=\"true\"></i>\n        Back\n    </button>\n\n    <button class=\"btn btn-dark mr-2\" type=\"button\" data-toggle=\"modal\" data-target=\"#reset\" *ngIf=\"isDirty()\">\n        <i class=\"fa fa-trash\" aria-hidden=\"true\"></i>\n        Reset form\n    </button>\n\n    <button class=\"btn btn-warning mr-2\" type=\"button\" data-toggle=\"modal\" *ngIf=\"isFormValid()\" [attr.data-target]=\"submitType()\">\n        {{submitLabel() | titlecase}}\n    </button>\n\n</app-modal-wrapper>","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormComponent } from './reactive-form/reactive-form.component';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { TmodalModule } from '../tmodal/tmodal.module';\nimport { WaitForPipe } from './wait/wait-for.pipe';\nimport { TconfirmationModule } from '@shared/tconfirmation/tconfirmation.module';\n\n\n\n\n@NgModule({\n  declarations: [\n    ReactiveFormComponent,\n    WaitForPipe\n  ],\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    TconfirmationModule,\n    TmodalModule,\n    RouterModule.forChild([\n      { path: '', component: ReactiveFormComponent }\n    ])\n  ]\n})\nexport class TformModule { }\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'waitFor'\n})\nexport class WaitForPipe implements PipeTransform {\n\n  transform(value: any, wait: number): any {\n    return new Promise((res, rej) => [\n      setTimeout(() => {\n        res(value);\n      }, wait)\n    ]);\n  }\n\n}\n"]}